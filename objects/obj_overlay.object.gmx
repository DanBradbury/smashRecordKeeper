<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// INFO: 
//      character_list - list of all available characters
//      characters     - current list of selected characters with session_records
//      num_characters - helper to determine how many characters are in current list
character_list = ds_list_create();
ds_list_add(character_list,
  "Bayonetta",
  "Bowser",
  "Bowser Jr.",
  "Captain Falcon",
  "Chrom",
  "Cloud",
  "Corrin",
  "Daisy",
  "Dark Pit",
  "Dark Samus",
  "Diddy Kong",
  "DK",
  "Dr. Mario",
  "Duck Hunt",
  "Falco",
  "Fox",
  "Ganondorf",
  "Greninja",
  "Ice Climbers",
  "Ike",
  "Inkling",
  "Incineroar",
  "Isabelle",
  "Jigglypuff",
  "Ken",
  "King Dedede",
  "King K.Rule",
  "Kirby",
  "Link",
  "Little Mac",
  "Lucario",
  "Lucas",
  "Lucina",
  "Luigi",
  "Mario",
  "Marth",
  "Mega Man",
  "Meta Knight",
  "Mewtwo",
  "Mii Brawler",
  "Mii Gunner",
  "Mii Fighter",
  "Mr Game &amp; Watch",
  "Ness",
  "Captain Olimar",
  "Pac-Man",
  "Palutena",
  "Peach",
  "Pichu",
  "Pikachu",
  "Piranha Plant",
  "Pit",
  "Pokemon Trainer",
  "Richter",
  "Ridley",
  "R.O.B.",
  "Robin",
  "Rosalina",
  "Roy",
  "Ryu",
  "Samus",
  "Sheik",
  "Shulk",
  "Simon",
  "Snake",
  "Sonic",
  "Toon Link",
  "Villager",
  "Wario",
  "Wii Fit Trainer",
  "Wolf",
  "Yoshi",
  "Young Link",
  "Zelda",
  "Zero Suit Samus"
);

event_triggered = false;
event_name = "none";
current_character = 0;
characters = ds_list_create();
num_characters = ds_list_size(characters);

session_records = ds_list_create();

clean_matchup_records = fresh_matchup_records();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// INFO: 
//         THOUGHT: this is an event handler to make sure we dont double track wins/losses
var t = ds_list_find_value(session_records, current_character);
switch(event_name){
  case 'win':
    ds_list_replace(session_records, current_character, pack(t[0]+1, t[1], t[2], t[3]));
    break;
  case 'loss':
    ds_list_replace(session_records, current_character, pack(t[0], t[1]+1, t[2], t[3]));
    break;

}
event_triggered = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// INFO: tracking a win
if(!event_triggered &amp;&amp; keyboard_check_released(vk_up)) {
  var t = instance_create(0, 0, obj_track_win);
  t.win = true;

  event_name = 'win';
  event_triggered = true;
  alarm[0] = 2;
}

// INFO: tracking a loss
if(!event_triggered &amp;&amp; keyboard_check_released(vk_down)) {
  var t = instance_create(0, 0, obj_track_win);

  event_name = 'loss';
  event_triggered = true;
  alarm[0] = 2;
}

// INFO: switching characters
if(!event_triggered &amp;&amp; keyboard_check_released(vk_right)) {
  if(current_character+1 &gt;= num_characters) {
    current_character = 0;
  } else {
    current_character += 1;
  }
}

// INFO: switching characters
if(!event_triggered &amp;&amp; keyboard_check_released(vk_left)) {
  if(current_character-1 &lt; 0) {
    current_character = num_characters-1;
  } else {
    current_character -= 1;
  }
}

// INFO: remove current character from list
if(keyboard_check_released(ord('R'))) {
  ds_list_delete(characters, current_character);
  ds_list_delete(session_records, current_character);
  num_characters--;
  current_character = 0;
}

// INFO: adding a new character with obj_picture_character_select
if(!instance_exists(obj_picture_character_select) &amp;&amp; !event_triggered &amp;&amp; keyboard_check_released(ord('A'))) {
  instance_create(0,0, obj_picture_character_select);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_default);

// INFO: iterate over the currently selected characters
//      1. find the session information
//      2. draw appropriate sprite + record info
//      * will draw a small yellow circle to mark who's activated
for(var i=0;i&lt;num_characters;i++) {
  var t = ds_list_find_value(session_records, i);
  draw_sprite(spr_portraits, t[2], 10,10+(50*i));
  draw_set_color(c_red);
  draw_text(60,3+(50*i),string(t[0])+" - "+string(t[1]));
  if(i==current_character) {
    draw_set_color(c_yellow);
    draw_circle(3,17+(50*i), 2, false);
  }
}

// INFO: draws the current characters session_records
//      1. ensure that we have a list of sessions
//      2. draw the matchups that we've played
if(ds_list_size(session_records) &gt; 0) {
    var tt = ds_list_find_value(session_records, current_character);
    var matchups_array = tt[3];
    // draw all matchups that we've played..
    var matchup_count = 0;
    var final_y = 5+(num_characters*50)
    
    for(var i = 0; i&lt;array_length_1d(matchups_array); i++) {
      var q = matchups_array[i];
      if(q[0] &gt; 0 || q[1] &gt; 0) {
        var portrait_y = final_y+45+(matchup_count*50)
        draw_sprite(spr_portraits, i, 10, portrait_y);
        draw_set_color(c_red);
        draw_text(60, portrait_y-7, string(q[0])+" - "+string(q[1]));
        matchup_count++;
      }
    }
    if(matchup_count &gt; 0) {
      draw_set_color(c_white);
      draw_line_width(0,final_y,room_width/2-300, final_y, 3);
      draw_text(0, final_y, "Matchups:");
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
